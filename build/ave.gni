import("//base/build/ave_args.gni")
import("//build/config/arm.gni")
import("//build/config/features.gni")
import("//build/config/mips.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/sysroot.gni")
import("//build/config/ui.gni")
import("//build_overrides/build.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
  import("//third_party/jni_zero/jni_zero.gni")
}

ave_include_test = true
ave_use_ffmpeg_demuxer = enable_ffmpeg_demuxer

ave_base_build_root = get_path_info(".", "abspath")
ave_project_root = get_path_info("../../", "abspath")

ave_common_configs = []
ave_common_configs += [ "//base/build:thread_safety_annotations" ]

if (ave_use_perfetto) {
  ave_common_configs += [ "//third_party/perfetto/gn:public_config" ]
}

# Global public configuration that should be applied to all WebRTC targets. You
# normally shouldn't need to include this in your target as it's automatically
# included when using the ave_* templates. It set the defines, include paths and
# compilation warnings that should be propagated to dependents of the targets
# depending on the target having this config.
ave_common_inherited_config =
    [ ave_base_build_root + ":common_inherited_config" ]

# Common configs to remove or add in all avp targets.
ave_remove_configs = []
ave_remove_configs += [ "//build/config/compiler:no_exceptions" ]

if (is_clang) {
  ave_remove_configs += [ "//build/config/clang:find_bad_constructs" ]
}

ave_add_configs = ave_common_configs

#ave_add_configs += [ "//build/config/compiler:rtti" ]
ave_add_configs += [ "//build/config/compiler:exceptions" ]

ave_prod_configs = []

ave_library_impl_config = []

set_defaults("ave_test") {
  configs = ave_add_configs
  suppressed_configs = []
}

set_defaults("ave_library") {
  configs = ave_add_configs
  suppressed_configs = []
}

set_defaults("ave_source_set") {
  configs = ave_add_configs
  suppressed_configs = []
}

set_defaults("ave_static_library") {
  configs = ave_add_configs
  suppressed_configs = []
}

set_defaults("ave_executable") {
  configs = ave_add_configs
  suppressed_configs = []
}

set_defaults("ave_shared_library") {
  configs = ave_add_configs
  suppressed_configs = []
}

ave_default_visibility = [ ave_project_root + "/*" ]

template("ave_test") {
  test(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "is_xctest",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])

    # Always override to public because when target_os is Android the `test`
    # template can override it to [ "*" ] and we want to avoid conditional
    # visibility.
    visibility = [ "*" ]
    configs += invoker.configs
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    public_configs = [
      absl_include_config,
      absl_define_config,
      absl_flags_config,
    ]
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }

    if (using_sanitizer) {
      if (is_linux) {
        if (!defined(invoker.data)) {
          data = []
        }
        data +=
            [ "//third_party/llvm-build/Release+Asserts/lib/libstdc++.so.6" ]
      }
    }
  }
}

template("ave_source_set") {
  source_set(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])
    forward_variables_from(invoker, [ "visibility" ])
    if (!defined(visibility)) {
      visibility = ave_default_visibility
    }

    if (!defined(testonly) || !testonly) {
      configs += ave_prod_configs
    }

    configs += invoker.configs
    configs += ave_library_impl_config
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    public_configs = []
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}

template("ave_static_library") {
  static_library(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])
    forward_variables_from(invoker, [ "visibility" ])
    if (!defined(visibility)) {
      visibility = ave_default_visibility
    }

    if (!defined(testonly) || !testonly) {
      configs += ave_prod_configs
    }

    configs += invoker.configs
    configs += ave_library_impl_config
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    public_configs = []
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}

template("ave_library") {
  if (is_component_build || (defined(invoker.testonly) && invoker.testonly)) {
    target_type = "source_set"
  } else {
    target_type = "static_library"
  }
  target(target_type, target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])
    forward_variables_from(invoker, [ "visibility" ])
    if (!defined(visibility)) {
      visibility = ave_default_visibility
    }

    if (!defined(testonly) || !testonly) {
      configs += ave_prod_configs
    }

    configs += invoker.configs
    configs += ave_library_impl_config
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    public_configs = []
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}

template("ave_executable") {
  executable(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "deps",
                             "configs",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])
    forward_variables_from(invoker, [ "visibility" ])
    if (!defined(visibility)) {
      visibility = ave_default_visibility
    }
    configs += invoker.configs
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    deps = invoker.deps

    public_configs = []
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}

template("ave_shared_library") {
  shared_library(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "configs",
                             "public_configs",
                             "suppressed_configs",
                             "visibility",
                           ])
    forward_variables_from(invoker, [ "visibility" ])
    if (!defined(visibility)) {
      visibility = ave_default_visibility
    }

    configs += invoker.configs
    configs -= ave_remove_configs
    configs -= invoker.suppressed_configs
    public_configs = []
    public_configs += ave_common_inherited_config
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}

if (is_android) {
  template("ave_android_library") {
    android_library(target_name) {
      forward_variables_from(invoker,
                             "*",
                             [
                               "configs",
                               "public_configs",
                               "suppressed_configs",
                               "visibility",
                             ])

      errorprone_args = []

      # Treat warnings as errors.
      errorprone_args += [ "-Werror" ]

      # Add any arguments defined by the invoker.
      if (defined(invoker.errorprone_args)) {
        errorprone_args += invoker.errorprone_args
      }

      if (!defined(deps)) {
        deps = []
      }

      no_build_hooks = true
      not_needed([ "android_manifest" ])
    }
  }

  template("ave_android_apk") {
    android_apk(target_name) {
      forward_variables_from(invoker,
                             "*",
                             [
                               "configs",
                               "public_configs",
                               "suppressed_configs",
                               "visibility",
                             ])

      # Treat warnings as errors.
      errorprone_args = []
      errorprone_args += [ "-Werror" ]

      if (!defined(deps)) {
        deps = []
      }

      no_build_hooks = true
    }
  }

  template("ave_instrumentation_test_apk") {
    instrumentation_test_apk(target_name) {
      forward_variables_from(invoker,
                             "*",
                             [
                               "configs",
                               "public_configs",
                               "suppressed_configs",
                               "visibility",
                             ])

      # Treat warnings as errors.
      errorprone_args = []
      errorprone_args += [ "-Werror" ]

      if (!defined(deps)) {
        deps = []
      }

      no_build_hooks = true
    }
  }
}
